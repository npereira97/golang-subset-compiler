//~+1.100000e+01 +2.000000e+00 +3.000000e+00 +4.000000e+00 +5.000000e+00 +6.000000e+00 +7.000000e+00 +8.000000e+00 +9.000000e+00 +1.000000e+01 \n+1.100000e+01 +2.200000e+01 +1.300000e+01 +1.400000e+01 +1.500000e+01 +1.600000e+01 +1.700000e+01 +1.800000e+01 +1.900000e+01 +2.000000e+01 \n+2.100000e+01 +2.200000e+01 +3.300000e+01 +2.400000e+01 +2.500000e+01 +2.600000e+01 +2.700000e+01 +2.800000e+01 +2.900000e+01 +3.000000e+01 \n+3.100000e+01 +3.200000e+01 +3.300000e+01 +4.400000e+01 +3.500000e+01 +3.600000e+01 +3.700000e+01 +3.800000e+01 +3.900000e+01 +4.000000e+01 \n+4.100000e+01 +4.200000e+01 +4.300000e+01 +4.400000e+01 +5.500000e+01 +4.600000e+01 +4.700000e+01 +4.800000e+01 +4.900000e+01 +5.000000e+01 \n+5.100000e+01 +5.200000e+01 +5.300000e+01 +5.400000e+01 +5.500000e+01 +6.600000e+01 +5.700000e+01 +5.800000e+01 +5.900000e+01 +6.000000e+01 \n+6.100000e+01 +6.200000e+01 +6.300000e+01 +6.400000e+01 +6.500000e+01 +6.600000e+01 +7.700000e+01 +6.800000e+01 +6.900000e+01 +7.000000e+01 \n+7.100000e+01 +7.200000e+01 +7.300000e+01 +7.400000e+01 +7.500000e+01 +7.600000e+01 +7.700000e+01 +8.800000e+01 +7.900000e+01 +8.000000e+01 \n+8.100000e+01 +8.200000e+01 +8.300000e+01 +8.400000e+01 +8.500000e+01 +8.600000e+01 +8.700000e+01 +8.800000e+01 +9.900000e+01 +9.000000e+01 \n+9.100000e+01 +9.200000e+01 +9.300000e+01 +9.400000e+01 +9.500000e+01 +9.600000e+01 +9.700000e+01 +9.800000e+01 +9.900000e+01 +1.100000e+02 \n+8.387097e-03 -7.677419e-02 -6.193548e-02 -4.709677e-02 -3.225806e-02 -1.741935e-02 -2.580645e-03 +1.225806e-02 +2.709677e-02 +4.193548e-02 \n-7.387097e-02 +3.774194e-02 -5.064516e-02 -3.903226e-02 -2.741935e-02 -1.580645e-02 -4.193548e-03 +7.419355e-03 +1.903226e-02 +3.064516e-02 \n-5.612903e-02 -4.774194e-02 +6.064516e-02 -3.096774e-02 -2.258065e-02 -1.419355e-02 -5.806452e-03 +2.580645e-03 +1.096774e-02 +1.935484e-02 \n-3.838710e-02 -3.322581e-02 -2.806452e-02 +7.709677e-02 -1.774194e-02 -1.258065e-02 -7.419355e-03 -2.258065e-03 +2.903226e-03 +8.064516e-03 \n-2.064516e-02 -1.870968e-02 -1.677419e-02 -1.483871e-02 +8.709677e-02 -1.096774e-02 -9.032258e-03 -7.096774e-03 -5.161290e-03 -3.225806e-03 \n-2.903226e-03 -4.193548e-03 -5.483871e-03 -6.774194e-03 -8.064516e-03 +9.064516e-02 -1.064516e-02 -1.193548e-02 -1.322581e-02 -1.451613e-02 \n+1.483871e-02 +1.032258e-02 +5.806452e-03 +1.290323e-03 -3.225806e-03 -7.741935e-03 +8.774194e-02 -1.677419e-02 -2.129032e-02 -2.580645e-02 \n+3.258065e-02 +2.483871e-02 +1.709677e-02 +9.354839e-03 +1.612903e-03 -6.129032e-03 -1.387097e-02 +7.838710e-02 -2.935484e-02 -3.709677e-02 \n+5.032258e-02 +3.935484e-02 +2.838710e-02 +1.741935e-02 +6.451613e-03 -4.516129e-03 -1.548387e-02 -2.645161e-02 +6.258065e-02 -4.838710e-02 \n+6.806452e-02 +5.387097e-02 +3.967742e-02 +2.548387e-02 +1.129032e-02 -2.903226e-03 -1.709677e-02 -3.129032e-02 -4.548387e-02 +4.032258e-02 
/*
+1.100000e+01 +2.000000e+00 +3.000000e+00 +4.000000e+00 +5.000000e+00 +6.000000e+00 +7.000000e+00 +8.000000e+00 +9.000000e+00 +1.000000e+01 
+1.100000e+01 +2.200000e+01 +1.300000e+01 +1.400000e+01 +1.500000e+01 +1.600000e+01 +1.700000e+01 +1.800000e+01 +1.900000e+01 +2.000000e+01 
+2.100000e+01 +2.200000e+01 +3.300000e+01 +2.400000e+01 +2.500000e+01 +2.600000e+01 +2.700000e+01 +2.800000e+01 +2.900000e+01 +3.000000e+01 
+3.100000e+01 +3.200000e+01 +3.300000e+01 +4.400000e+01 +3.500000e+01 +3.600000e+01 +3.700000e+01 +3.800000e+01 +3.900000e+01 +4.000000e+01 
+4.100000e+01 +4.200000e+01 +4.300000e+01 +4.400000e+01 +5.500000e+01 +4.600000e+01 +4.700000e+01 +4.800000e+01 +4.900000e+01 +5.000000e+01 
+5.100000e+01 +5.200000e+01 +5.300000e+01 +5.400000e+01 +5.500000e+01 +6.600000e+01 +5.700000e+01 +5.800000e+01 +5.900000e+01 +6.000000e+01 
+6.100000e+01 +6.200000e+01 +6.300000e+01 +6.400000e+01 +6.500000e+01 +6.600000e+01 +7.700000e+01 +6.800000e+01 +6.900000e+01 +7.000000e+01 
+7.100000e+01 +7.200000e+01 +7.300000e+01 +7.400000e+01 +7.500000e+01 +7.600000e+01 +7.700000e+01 +8.800000e+01 +7.900000e+01 +8.000000e+01 
+8.100000e+01 +8.200000e+01 +8.300000e+01 +8.400000e+01 +8.500000e+01 +8.600000e+01 +8.700000e+01 +8.800000e+01 +9.900000e+01 +9.000000e+01 
+9.100000e+01 +9.200000e+01 +9.300000e+01 +9.400000e+01 +9.500000e+01 +9.600000e+01 +9.700000e+01 +9.800000e+01 +9.900000e+01 +1.100000e+02 
+8.387097e-03 -7.677419e-02 -6.193548e-02 -4.709677e-02 -3.225806e-02 -1.741935e-02 -2.580645e-03 +1.225806e-02 +2.709677e-02 +4.193548e-02 
-7.387097e-02 +3.774194e-02 -5.064516e-02 -3.903226e-02 -2.741935e-02 -1.580645e-02 -4.193548e-03 +7.419355e-03 +1.903226e-02 +3.064516e-02 
-5.612903e-02 -4.774194e-02 +6.064516e-02 -3.096774e-02 -2.258065e-02 -1.419355e-02 -5.806452e-03 +2.580645e-03 +1.096774e-02 +1.935484e-02 
-3.838710e-02 -3.322581e-02 -2.806452e-02 +7.709677e-02 -1.774194e-02 -1.258065e-02 -7.419355e-03 -2.258065e-03 +2.903226e-03 +8.064516e-03 
-2.064516e-02 -1.870968e-02 -1.677419e-02 -1.483871e-02 +8.709677e-02 -1.096774e-02 -9.032258e-03 -7.096774e-03 -5.161290e-03 -3.225806e-03 
-2.903226e-03 -4.193548e-03 -5.483871e-03 -6.774194e-03 -8.064516e-03 +9.064516e-02 -1.064516e-02 -1.193548e-02 -1.322581e-02 -1.451613e-02 
+1.483871e-02 +1.032258e-02 +5.806452e-03 +1.290323e-03 -3.225806e-03 -7.741935e-03 +8.774194e-02 -1.677419e-02 -2.129032e-02 -2.580645e-02 
+3.258065e-02 +2.483871e-02 +1.709677e-02 +9.354839e-03 +1.612903e-03 -6.129032e-03 -1.387097e-02 +7.838710e-02 -2.935484e-02 -3.709677e-02 
+5.032258e-02 +3.935484e-02 +2.838710e-02 +1.741935e-02 +6.451613e-03 -4.516129e-03 -1.548387e-02 -2.645161e-02 +6.258065e-02 -4.838710e-02 
+6.806452e-02 +5.387097e-02 +3.967742e-02 +2.548387e-02 +1.129032e-02 -2.903226e-03 -1.709677e-02 -3.129032e-02 -4.548387e-02 +4.032258e-02 

*/
package main

func getMinor(matrix [10][10]float64, exclRow, exclCol, dim int) [10][10]float64 {
	var (
		rowOffset, colOffset int
	)
	var minor [10][10]float64
	for i := 0; i < dim - 1; i++ {
		colOffset = 0
		if i == exclRow {
			rowOffset++
		}
		for j := 0; j < dim - 1; j++ {
			if j == exclCol {
				colOffset++
			}
			minor[i][j] = matrix[i + rowOffset][j + colOffset];
		}
	}
	return minor
}

func deter(matrix [10][10]float64, dim int) float64 {
	if dim == 2 {
		return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
	}
	det := 0.
	
	for i := 0; i < dim; i++ {
		minor := getMinor(matrix, 0, i, dim);
		if i % 2 == 0 {
			det += matrix[0][i] * deter(minor, dim - 1)
		} else {
			det -= matrix[0][i] * deter(minor, dim - 1)
		}
	}
	return det
}

func inverse(matrix [10][10]float64) [10][10]float64 {
	det := deter(matrix, 10)
	var inverse [10][10]float64;
	if det == 0. {
		return inverse
	}
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			inverse[i][j] = (1. / det) * deter(getMinor(matrix, j, i, 10), 10 - 1)
			if  (i + j) % 2 != 0 {
				inverse[i][j] *= -1.
			}
		}
	}
	return inverse
}
func main() {
	var matrix [10][10]float64
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			matrix[i][j] = float64(i*10 + j) + 1.
			if ( i == j ) {
				matrix[i][j] += 10.
			}
		}
	}
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			print(matrix[i][j], " ")
		}
		println()
	}
	inv := inverse(matrix)
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			print(inv[i][j], " ")
		}
		println()
	}
}